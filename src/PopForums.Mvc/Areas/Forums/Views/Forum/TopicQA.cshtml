@model TopicContainerForQA
@inject IUserRetrievalShim UserRetrievalShim
@{
	ViewBag.Title = Model.Topic.Title;
	Layout = "~/Areas/Forums/Views/Shared/PopForumsMaster.cshtml";
	var user = UserRetrievalShim.GetUser();
	var profile = UserRetrievalShim.GetProfile();
	var topicStateSerialized = JsonSerializer.Serialize(Model.TopicState, new JsonSerializerOptions{ PropertyNamingPolicy = JsonNamingPolicy.CamelCase });
}

@section HeaderContent {
    <script src="~/_content/PopForums.Mvc/lib/tinymce/tinymce.min.js" type="text/javascript"></script>
<script type="text/javascript">
	PopForums.currentTopicState = Object.assign(new PopForums.TopicState(), @Html.Raw(topicStateSerialized));
	PopForums.currentTopicState.setupTopic();
</script>
}

<h1>
	@if (user != null)
	{
		<pf-subscribebutton buttonclass="btn-link text-decoration-none" subscribetext="@PopForums.Resources.Subscribe" unsubscribetext="@PopForums.Resources.Unsubscribe"></pf-subscribebutton>
		<pf-favoritebutton buttonclass="btn-link text-decoration-none" makefavoritetext="@PopForums.Resources.FavoriteMake" removefavoritetext="@PopForums.Resources.FavoriteRemove"></pf-favoritebutton>
	}
	@Model.Topic.Title
</h1>

<ul id="TopBreadcrumb" class="breadcrumb sticky-top">
	<li class="breadcrumb-item"><a asp-controller="@ForumController.Name" asp-action="Recent">@PopForums.Resources.Recent</a></li>
	<li class="breadcrumb-item"><a asp-controller="@HomeController.Name" asp-action="Index">@PopForums.Resources.Forums</a></li>
	<li class="breadcrumb-item"><a asp-controller="@ForumController.Name" asp-action="Index" asp-route-urlName="@Model.Forum.UrlName" asp-route-pageNumber="1">@Model.Forum.Title</a></li>
	<li class="breadcrumb-item active">@Model.Topic.Title</li>
</ul>

@if (user != null) {
	<p id="AsyncResponse"></p>
}

<div id="PostStream">

	@{
		@(await Html.PartialAsync("QAPost", new QAPostItemContainer { PostWithChildren = Model.QuestionPostWithComments, Topic = Model.Topic, Avatars = Model.Avatars, Signatures = Model.Signatures, User = user, Profile = profile, VotedPostIDs = Model.VotedPostIDs, Post = Model.QuestionPostWithComments.Post }))
	}

	@if (Model.PermissionContext.UserCanPost)
	{
		<div id="NewReply" style="display: none;"></div>
		<pf-replybutton buttonclass="btn btn-primary" buttontext="@PopForums.Resources.PostAnswer" topicid="@Model.Topic.TopicID" postid=""></pf-replybutton>
	}
	else
	{
		<p class="alert alert-warning">@Model.PermissionContext.DenialReason</p>
	}

	<h2>@PopForums.Resources.Answers</h2>

	@foreach (var answer in Model.AnswersWithComments)
	{
		@await Html.PartialAsync("QAPost", new QAPostItemContainer { PostWithChildren = answer, Topic = Model.Topic, Avatars = Model.Avatars, Signatures = Model.Signatures, User = user, Profile = profile, VotedPostIDs = Model.VotedPostIDs, Post = answer.Post });
	}

</div>

@await Html.PartialAsync("ModeratorPanel", Model.Topic)