@inject ITimeFormattingService TimeFormattingService
@inject IUserRetrievalShim UserRetrievalShim
@model PostItemContainer
@{
	var user = UserRetrievalShim.GetUser();
	string deleteLink;
	if (Model.Post.IsDeleted)
	{ deleteLink = PopForums.Resources.Undelete; }
	else if (Model.Post.IsFirstInTopic)
	{ deleteLink = PopForums.Resources.DeleteTopic; }
	else
	{ deleteLink = PopForums.Resources.Delete; }
	var hideVanity = false;
	if (Model.Profile != null)
	{ hideVanity = Model.Profile.HideVanity; }

	var isLoggedIn = user != null;
	var isAuthor = user?.UserID == Model.Post.UserID;
	var isVoted = isLoggedIn && !isAuthor && Model.VotedPostIDs.Contains(Model.Post.PostID);
}

<div class="@(Model.Post.IsDeleted ? "bg-warning " : "")postItem" data-postID="@Model.Post.PostID">
	<div class="postUserData bg-primary rounded mb-3 px-3 py-1">
		<pf-postminiprofile username="@Model.Post.Name" userid="@Model.Post.UserID" miniprofileboxclass="miniProfileBox bg-light text-dark rounded" usernameclass="text-light"></pf-postminiprofile>
		<small class="postTime text-end text-light text-secondary">
			@if (Model.User != null && Model.User.IsInRole(PermanentRoles.Moderator))
			{
				@:IP: @Model.Post.IP -
			}
			<pf-formattedtime utctime="@Model.Post.PostTime.ToString("o")"></pf-formattedtime>
		</small>
	</div>
	@if (!hideVanity && Model.Avatars.ContainsKey(Model.Post.UserID))
	{
		<img src="@Url.Action("Avatar", "Image", new {id = (Model.Avatars)[Model.Post.UserID]})" alt="@String.Format(PopForums.Resources.NameAvatar, Model.Post.Name)" class="avatar float-end ms-3 mb-3 d-none d-sm-block" />
	}
    
	<div id="text@(Model.Post.PostID)" class="postBody">
		@Html.Raw(Model.Post.FullText)
	</div>
	
	@if (Model.Post.IsEdited && Model.Post.LastEditTime.HasValue)
	{
		<small>@String.Format(PopForums.Resources.NameLastEdit, Model.Post.LastEditName), <span class="fTime" data-utc="@Model.Post.LastEditTime.Value.ToString("o")">@TimeFormattingService.GetFormattedTime(Model.Post.LastEditTime.Value, Model.Profile)</span></small>
	}

	@if (Model.Post.ShowSig && !hideVanity && (Model.Signatures).ContainsKey(Model.Post.UserID))
	{
		<hr />
		<div class="text-secondary">@Html.Raw((Model.Signatures)[Model.Post.UserID])</div>
	}
	<div class="postToolContainer">
		<pf-votecount votes="@Model.Post.Votes" postid="@Model.Post.PostID" votescontainerclass="voters" badgeclass="voteCount badge bg-primary" isloggedin="@isLoggedIn.ToString()" isauthor="@isAuthor.ToString()" isvoted="@isVoted.ToString()" votebuttonclass="link-primary"></pf-votecount>
		<ul class="postTools list-inline">
			<li class="list-inline-item">@Html.ActionLink(PopForums.Resources.Link, "PostLink", "Forum", new {id = Model.Post.PostID}, null)</li>
			@if (user != null && Model.Topic != null && Model.Topic.IsClosed == false)
			{
				<li class="list-inline-item"><pf-replybutton buttonclass="btn-link list-inline-item" buttontext="@PopForums.Resources.Reply" topicid="@Model.Topic.TopicID" postid="@Model.Post.PostID" overridedisplay="true"></pf-replybutton></li>
				<li class="list-inline-item"><pf-quotebutton name="@Model.Post.Name" buttonclass="btn-link list-inline-item" containerid="text@(Model.Post.PostID)" buttontext="@PopForums.Resources.Quote" tip="@PopForums.Resources.SelectText" postid="@Model.Post.PostID" callback="PopForums.currentTopicState.nextQuote"></pf-quotebutton></li>
			}
			@if (Model.User.IsPostEditable(Model.Post))
			{
				<li class="list-inline-item">@Html.ActionLink(PopForums.Resources.Edit, "Edit", "Forum", new {id = Model.Post.PostID}, null)</li>
				if (Model.Post.IsDeleted)
				{
					<li class="list-inline-item">
						<form asp-action="UndeletePost" asp-controller="Moderator" asp-antiforgery="false" asp-route-id="@Model.Post.PostID" class="deletePostForm d-inline-block"><input type="submit" value="@PopForums.Resources.Undelete" class="btn-link"/></form>
					</li>
				}
				else
				{
					<li class="list-inline-item">
						<form asp-action="DeletePost" asp-controller="Forum" asp-antiforgery="false" asp-route-id="@Model.Post.PostID" class="deletePostForm d-inline-block"><input type="submit" value="@deleteLink" class="btn-link"/></form>
					</li>
				}
			}
			@if (Model.Post.IsEdited && Model.User != null && Model.User.IsInRole(PermanentRoles.Moderator))
			{
				<li class="list-inline-item">
					<pf-postmoderationlogbutton buttonclass="btn-link" buttontext="@PopForums.Resources.ModerationLog" postid="@Model.Post.PostID" parentselectortoappendto=".postToolContainer"></pf-postmoderationlogbutton>
				</li>
			}
		</ul>
	</div>
</div>